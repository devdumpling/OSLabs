package nachos.threads;

import nachos.machine.*;
import java.util.LinkedList;
/**
 * A <i>communicator</i> allows threads to synchronously exchange 32-bit
 * messages. Multiple threads can be waiting to <i>speak</i>,
 * and multiple threads can be waiting to <i>listen</i>. But there should never
 * be a time when both a speaker and a listener are waiting, because the two
 * threads can be paired off at this point.
 */
public class Communicator {
    Lock lock = new Lock();
    Lock condLock = new Lock();
    Condition speakers = new Condition(condLock);
    Condition listeners = new Condition(condLock);
    
    LinkedList<Integer> msgQueue= new LinkedList<Integer>();
    int numSpeakers = 0;
    int numListeners = 0;
    /**
     * Allocate a new communicator.
     */
    public Communicator() {
    //nothing to be done, all that stuff is taken care of above
    //and the java compiler puts it in here anyways
    //yay
    }

    /**
     * Wait for a thread to listen through this communicator, and then transfer
     * <i>word</i> to the listener.
     *
     * <p>
     * Does not return until this thread is paired up with a listening thread.
     * Exactly one listener should receive <i>word</i>.
     *
     * @param	word	the integer to transfer.
     */
    public void speak(int word) {
        condLock.acquire();
        speakers.wake();
        condLock.release();
        
        lock.acquire();
        numSpeakers++;
        msgQueue.add(new Integer(word));
        lock.release();
        
        if (numListeners < 1){
            condLock.acquire();
            listeners.sleep();
            condLock.release();
        }
        //message already in queue, we're done 
        lock.acquire();
        numListeners--;
        lock.release();
    }

    /**
     * Wait for a thread to speak through this communicator, and then return
     * the <i>word</i> that thread passed to <tt>speak()</tt>.
     *
     * @return	the integer transferred.
     */    
    public int listen() {
        condLock.acquire();
	listeners.wake();
        condLock.release();

        lock.acquire();
        numListeners++;
        lock.release();

        if (numSpeakers < 1){
            condLock.acquire();
            speakers.sleep();
            condLock.release();
        }
        int toReturn = msgQueue.poll().intValue();

        lock.acquire();
        numSpeakers--;
        lock.release();
        return toReturn;
    }
}
